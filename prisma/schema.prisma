// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator dbml {
  provider = "prisma-dbml-generator"
}
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ------------------------------------------------------
// Modèles pour l'authentification NextAuth.js
// ------------------------------------------------------
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ------------------------------------------------------
// Modèles pour l'application
// ------------------------------------------------------

// Type de distribution Linux
model TypeDistribution {
  noTypeDistribution String    @id @default(cuid())
  nom                String    @unique
  description        String
  Serveur            Serveur[]
}

// Serveur Linux
model Serveur {
  noServeur            String  @id @default(cuid())
  ip                   String
  nom                  String
  description          String?
  portSSH              Int
  noTypeDistributionFK String
  noIdentifiantFK      String

  automatisationServeur automatisationServeur[]
  serveurGroupe         serveurGroupe[]
  typeDistribution      TypeDistribution        @relation(fields: [noTypeDistributionFK], references: [noTypeDistribution], onDelete: Cascade)
  Identifiant           Identifiant?            @relation(fields: [noIdentifiantFK], references: [noIdentifiant])
}

// Utilisateur de connexion
model Identifiant {
  noIdentifiant  String  @id @default(cuid())
  nomIdentifiant String
  nomUtilisateur String
  motDePasse     String?
  cleSSH         String

  serveur Serveur[]
}

// Clés de chiffrement
model CleChiffrement {
  noCleChiffrement String @id @default(cuid())
  clePrivee        String
  clePublique      String
}

// Serveurs dans un groupe
model serveurGroupe {
  noServeurGroupe String @id @default(cuid())
  noGroupeFK      String
  noServeurFK     String

  groupe  groupe  @relation(fields: [noGroupeFK], references: [noGroupe], onDelete: Cascade)
  serveur Serveur @relation(fields: [noServeurFK], references: [noServeur], onDelete: Cascade)
}

// Groupe de serveurs
model groupe {
  noGroupe             String                 @id @default(cuid())
  nom                  String
  description          String
  serveurGroupe        serveurGroupe[]
  automatisationGroupe automatisationGroupe[]
}

// Groupes assignés à une automatisation
model automatisationGroupe {
  noAutomatisationGroupe String @id @default(cuid())
  nogroupeFK             String
  noAutomatisationFK     String

  groupe         groupe         @relation(fields: [nogroupeFK], references: [noGroupe], onDelete: Cascade)
  automatisation automatisation @relation(fields: [noAutomatisationFK], references: [noAutomatisation], onDelete: Cascade)
}

// Serveurs assignés à une automatisation
model automatisationServeur {
  noAutomatisationServeur String         @id @default(cuid())
  noAutomatisationFK      String
  noServeurFK             String
  automatisation          automatisation @relation(fields: [noAutomatisationFK], references: [noAutomatisation], onDelete: Cascade)
  serveur                 Serveur        @relation(fields: [noServeurFK], references: [noServeur], onDelete: Cascade)
}

// Automatisation
model automatisation {
  noAutomatisation      String                  @id @default(cuid())
  nom                   String
  description           String?
  admin                 Boolean @default(false)
  script                String
  cronMinute            String
  cronHeure             String
  cronJour              String
  cronMois              String
  cronJourSemaine       String
  automatisationGroupe  automatisationGroupe[]
  automatisationServeur automatisationServeur[]
}
